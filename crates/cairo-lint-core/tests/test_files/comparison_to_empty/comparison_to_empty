//! > test comparison with ArrayTrait::new()

//! > cairo_code
fn main() {
    let arr: Array<felt252> = ArrayTrait::new();
    // Using .is_empty() instead of comparing to ArrayTrait::new()
    if arr.is_empty() {
        println!("arr is empty");
    }
}

//! > ==========================================================================

//! > test comparison with ArrayTrait::new() on LHS

//! > cairo_code
fn main() { 
    let arr: Array<felt252> = ArrayTrait::new();
    // Using .is_empty() instead of comparing to ArrayTrait::new() on the left-hand side
    if arr.is_empty() {
        println!("arr is empty");
    }
}       

//! > ==========================================================================

//! > test negated comparison with ArrayTrait::new()

//! > cairo_code
fn main() {
    let arr: Array<felt252> = ArrayTrait::new();
    // Using !.is_empty() instead of negating comparison to ArrayTrait::new()
    if !arr.is_empty() {
        println!("arr is not empty");
    }
}

//! > ==========================================================================

//! > test negated comparison with ArrayTrait::new() on LHS

//! > cairo_code
fn main() {
    let arr: Array<felt252> = ArrayTrait::new();
    // Using !.is_empty() instead of negating comparison to ArrayTrait::new() on the left-hand side
    if !arr.is_empty() {
        println!("arr is not empty");
    }
}

//! > ==========================================================================

//! > test comparison with ArrayTrait::new() in complex expression

//! > cairo_code
fn main() {
    let arr1: Array<felt252> = ArrayTrait::new();
    let arr2: Array<felt252> = ArrayTrait::new();
    // Using .is_empty() and !.is_empty() in a complex expression
    if arr1.is_empty() && !arr2.is_empty() {
        println!("arr1 is empty and arr2 is not");
    }
}
